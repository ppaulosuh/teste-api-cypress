{
  "stats": {
    "suites": 1,
    "tests": 7,
    "passes": 7,
    "pending": 0,
    "failures": 0,
    "start": "2022-07-22T14:39:17.709Z",
    "end": "2022-07-22T14:39:19.226Z",
    "duration": 1517,
    "testsRegistered": 7,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "5e448a41-1a31-4f1b-83e6-3e1aa5defdfd",
      "title": "",
      "fullFile": "cypress/integration/produtos.spec.js",
      "file": "cypress/integration/produtos.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "27f501a1-f591-4741-956d-0c821a840870",
          "title": "Teste da Funcionalidade Produtos",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve validar contrato de produtos",
              "fullTitle": "Teste da Funcionalidade Produtos Deve validar contrato de produtos",
              "timedOut": null,
              "duration": 423,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('produtos').then(response => {\n  return _produtos.default.validateAsync(response.body);\n});",
              "err": {},
              "uuid": "a7f446d9-40de-4081-8531-fc106e8dc190",
              "parentUUID": "27f501a1-f591-4741-956d-0c821a840870",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "listar produtos",
              "fullTitle": "Teste da Funcionalidade Produtos listar produtos",
              "timedOut": null,
              "duration": 167,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: 'Produtos'\n}).then(response => {\n  expect(response.status).to.equal(200);\n  expect(response.body).to.have.property('produtos');\n  expect(response.duration).to.be.lessThan(20);\n});",
              "err": {},
              "uuid": "b2d14e28-22e7-4938-9678-8f0296e16f8c",
              "parentUUID": "27f501a1-f591-4741-956d-0c821a840870",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cadastrar Produto",
              "fullTitle": "Teste da Funcionalidade Produtos Cadastrar Produto",
              "timedOut": null,
              "duration": 119,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Produto EBAC ${Math.floor(Math.random() * 100000)}`;\ncy.request({\n  method: 'POST',\n  url: 'produtos',\n  body: {\n    \"nome\": produto,\n    \"preco\": 200,\n    \"descricao\": \"Produto Novo\",\n    \"quantidade\": 100\n  },\n  headers: {\n    authorization: token\n  }\n}).then(response => {\n  expect(response.status).to.equal(201);\n  expect(response.body.message).to.equal('Cadastro realizado com sucesso');\n});",
              "err": {},
              "uuid": "cce43fd0-6e2c-4ef1-a37f-3384a06a5c9d",
              "parentUUID": "27f501a1-f591-4741-956d-0c821a840870",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve validar mensagem de erro ao cadastrar produto repetido",
              "fullTitle": "Teste da Funcionalidade Produtos Deve validar mensagem de erro ao cadastrar produto repetido",
              "timedOut": null,
              "duration": 121,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.cadastrarProduto(token, \"Produto EBAC Novo 1\", 250, \"Descriçãod do Produto novo\", 180).then(response => {\n  expect(response.status).to.equal(400);\n  expect(response.body.message).to.equal('Já existe produto com esse nome');\n});",
              "err": {},
              "uuid": "605bef16-16ba-4d65-9651-1537b9c4a644",
              "parentUUID": "27f501a1-f591-4741-956d-0c821a840870",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve editar um produto já cadastrado",
              "fullTitle": "Teste da Funcionalidade Produtos Deve editar um produto já cadastrado",
              "timedOut": null,
              "duration": 188,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('produtos').then(response => {\n  //cy.log(response.body.produtos[0]._id)\n  let id = response.body.produtos[0]._id;\n  cy.request({\n    method: 'PUT',\n    url: `produtos/${id}`,\n    headers: {\n      authorization: token\n    },\n    body: {\n      \"nome\": \"Produto EBAC editado\",\n      \"preco\": 100,\n      \"descricao\": \"Produto Novo\",\n      \"quantidade\": 100\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal(\"Registro alterado com sucesso\");\n  });\n});",
              "err": {},
              "uuid": "39e5ee92-85bb-420e-8558-5c4d900a0e7c",
              "parentUUID": "27f501a1-f591-4741-956d-0c821a840870",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve editar um produto cadastrado previamente",
              "fullTitle": "Teste da Funcionalidade Produtos Deve editar um produto cadastrado previamente",
              "timedOut": null,
              "duration": 96,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Produto EBAC ${Math.floor(Math.random() * 100000)}`;\ncy.cadastrarProduto(token, produto, 250, \"Descrição do Produto novo\", 180).then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'PUT',\n    url: `produtos/${id}`,\n    headers: {\n      authorization: token\n    },\n    body: {\n      \"nome\": produto,\n      \"preco\": 200,\n      \"descricao\": \"Produto Novo\",\n      \"quantidade\": 200\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal(\"Registro alterado com sucesso\");\n  });\n});",
              "err": {},
              "uuid": "613fff8e-5509-4d93-9673-70ff6004a0d1",
              "parentUUID": "27f501a1-f591-4741-956d-0c821a840870",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve deletar um produto previamente cadastrado",
              "fullTitle": "Teste da Funcionalidade Produtos Deve deletar um produto previamente cadastrado",
              "timedOut": null,
              "duration": 182,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Produto EBAC ${Math.floor(Math.random() * 100000)}`;\ncy.cadastrarProduto(token, produto, 250, \"Descrição do Produto novo\", 180).then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'DELETE',\n    url: `produtos/${id}`,\n    headers: {\n      authorization: token\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro excluído com sucesso');\n    expect(response.status).to.equal(200);\n  });\n});",
              "err": {},
              "uuid": "cfeddfc3-8e2e-4a70-92f7-b42ed18c2678",
              "parentUUID": "27f501a1-f591-4741-956d-0c821a840870",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a7f446d9-40de-4081-8531-fc106e8dc190",
            "b2d14e28-22e7-4938-9678-8f0296e16f8c",
            "cce43fd0-6e2c-4ef1-a37f-3384a06a5c9d",
            "605bef16-16ba-4d65-9651-1537b9c4a644",
            "39e5ee92-85bb-420e-8558-5c4d900a0e7c",
            "613fff8e-5509-4d93-9673-70ff6004a0d1",
            "cfeddfc3-8e2e-4a70-92f7-b42ed18c2678"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1296,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}